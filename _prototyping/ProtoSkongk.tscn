[gd_scene load_steps=5 format=2]

[ext_resource path="res://SinglePixel.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

export (float) var move_speed

var _facing_direction = 1

func _ready():
	$Punch.hide()
	$Punch/CollisionShape2D.set_deferred(\"disabled\", true)
	

func _unhandled_key_input(event):
	if event.is_action_pressed(\"ui_accept\"):
		$Punch.show()
		$Punch.position.x = abs($Punch.position.x) * _facing_direction
		$Punch/CollisionShape2D.set_deferred(\"disabled\", false)
		$PunchTimer.start()

func _physics_process(delta):
	var velocity = Vector2(int(Input.is_action_pressed(\"ui_right\")) - int(Input.is_action_pressed(\"ui_left\")),
			int(Input.is_action_pressed(\"ui_down\")) - int(Input.is_action_pressed(\"ui_up\")))
	
	if velocity.x:
		_facing_direction = velocity.x
	
	move_and_slide(velocity * move_speed)

func _on_Punch_body_entered(body):
	if body.name != \"ProtoSkongk\":
		body.queue_free()

func _on_PunchTimer_timeout():
	$Punch.hide()
	$Punch/CollisionShape2D.set_deferred(\"disabled\", true)
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 8, 8 )

[sub_resource type="CapsuleShape2D" id=3]
radius = 8.0
height = 22.0

[node name="ProtoSkongk" type="KinematicBody2D"]
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}
move_speed = 90.0

[node name="Sprite" type="Sprite" parent="."]
modulate = Color( 0, 0, 0, 1 )
position = Vector2( -16, -16 )
scale = Vector2( 32, 32 )
texture = ExtResource( 1 )
centered = false

[node name="FloorCollision" type="CollisionShape2D" parent="."]
position = Vector2( 0, 8 )
shape = SubResource( 2 )

[node name="Punch" type="Area2D" parent="."]
editor/display_folded = true
modulate = Color( 0.243137, 0, 1, 1 )
position = Vector2( 23, 0 )
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Punch"]
rotation = 1.5708
shape = SubResource( 3 )

[node name="PunchTimer" type="Timer" parent="."]
process_mode = 0
wait_time = 0.3
one_shot = true
[connection signal="body_entered" from="Punch" to="." method="_on_Punch_body_entered"]
[connection signal="timeout" from="PunchTimer" to="." method="_on_PunchTimer_timeout"]
